<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IgnorantPersistence</name>
    </assembly>
    <members>
        <member name="T:IgnorantPersistence.ISoftDeleteEntity">
            <summary>
            An interface entities can implement to support
            </summary>
        </member>
        <member name="M:IgnorantPersistence.ISoftDeleteEntity.CopyValuesFrom(System.Object)">
            <summary>
            Updates an existing entity from the values of another
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:IgnorantPersistence.ISoftDeleteEntity.DeletedDate">
            <summary>
            Gets and sets the DateTime which the entity was deleted. null means not deleted
            </summary>
        </member>
        <member name="P:IgnorantPersistence.ISoftDeleteEntity.Signature">
            <summary>
            Gets a value which is used to identify the entity after it is deleted
            </summary>
        </member>
        <member name="T:IgnorantPersistence.ISoftDeleteTable`1">
            <summary>
            A table which doesn't actually delete but instead flags as deleted
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:IgnorantPersistence.ITable`1">
            <summary>
            A queryable interface to the underlying storage
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IgnorantPersistence.ITable`1.Add(`0)">
            <summary>
            Adds an item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IgnorantPersistence.ITable`1.Update(`0)">
            <summary>
            Updates an item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IgnorantPersistence.ITable`1.Remove(`0)">
            <summary>
            Deletes an item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IgnorantPersistence.ITable`1.RemoveWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes a set of items
            </summary>
            <param name="match"></param>
        </member>
        <member name="P:IgnorantPersistence.ISoftDeleteTable`1.AllItems">
            <summary>
            Gets a queryable collection of all items, deleted or not
            </summary>
        </member>
        <member name="P:IgnorantPersistence.ISoftDeleteTable`1.Deleted">
            <summary>
            Gets a queryable collection of all the deleted items
            </summary>
        </member>
        <member name="T:IgnorantPersistence.IUnitOfWork">
            <summary>
            Unit-of-Work interface
            </summary>
        </member>
        <member name="M:IgnorantPersistence.IUnitOfWork.GetTable``1">
            <summary>
            Gets access to the persistence collection for <typeparamref name="T" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IgnorantPersistence.IUnitOfWork.Save">
            <summary>
            Persists any changes to the underlying storage
            </summary>
        </member>
        <member name="T:IgnorantPersistence.Memory.MemoryTable`1">
            <summary>
            An in-memory representation of a queryable table.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Note this contains object references so if the object is retrieved and updated,
            the changes will take effect immediately within the Table. This is different
            from remote persistent storage system such as a RDBMS.
            </remarks>
        </member>
        <member name="M:IgnorantPersistence.Memory.MemoryTable`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Ctor
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:IgnorantPersistence.Memory.MemoryTable`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Ctor
            </summary>
            <param name="comparer">initial items</param>
            <param name="items">determines if two objects represent the same item</param>
        </member>
        <member name="T:IgnorantPersistence.Memory.MemoryUnitOfWork">
            <summary>
            An in-memory implementation of a unit-of-work
            </summary>
        </member>
        <member name="M:IgnorantPersistence.Memory.MemoryUnitOfWork.Save">
            <summary>
            Save any changes
            </summary>
        </member>
        <member name="M:IgnorantPersistence.Memory.MemoryUnitOfWork.GetTable``1">
            <summary>
            Gets an in-memory instance of an ITable
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IgnorantPersistence.Memory.MemoryUnitOfWork.PopulateTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sets equality comparer for a given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:IgnorantPersistence.Memory.MemoryUnitOfWork.PopulateTable``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sets the equality comparer and initial values for a given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="comparer"></param>
            <param name="items"></param>
        </member>
    </members>
</doc>
